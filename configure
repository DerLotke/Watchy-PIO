#!/usr/bin/env python3
# requires at least Python 3.11

import sys
assert sys.version_info >= (3, 11)

import argparse
parser = argparse.ArgumentParser(
    prog="configure",
    description="Sets up the watchface for the build",
    epilog="by Daniel Wohllebe"
)
parser.add_argument("watchface", nargs="?", default="UNSPECIFIED")
parser.add_argument("-l", "--list", dest="do_list_bsets", action="store_true")
parser.add_argument("-d", "--dry-run", dest="do_dry_run", action="store_true")
args = parser.parse_args()


# ----------------------------------------------------

import os
import shutil
import subprocess
import tomllib
from collections import namedtuple

project_root = os.path.dirname(os.path.abspath(__file__))
buildset_path = os.path.join(project_root, "buildsets")
src_path = os.path.join(project_root, "src")


def parse_buildset(path):
    with open(path, 'rb') as f:
        bdict = tomllib.load(f)
        return bdict


def start():
    # Load buildsets
    bsets = []
    Buildset = namedtuple("Buildset", ["name", "content"])
    for bfile in os.listdir(buildset_path):
        if bfile.endswith(".toml"):
            bsets.append( Buildset(
                bfile.split('.')[0],
                parse_buildset(os.path.join(buildset_path, bfile))
            ) )

    # Parse buildsets and create a map of watchfaces to each set
    namemap = {}
    for bset in bsets:
        for name in bset.content["names"]:
            if name in namemap:
                print(f"Error: watchface {name} found multiple times in buildsets",
                      file=sys.stderr)
                return 1
            namemap[name] = bset

    if args.do_list_bsets:
        print("\n".join(namemap.keys()))
        return 0

    # Check if user requested something out of these sets
    if args.watchface not in namemap:
        print(f"Error: watchface {args.watchface} is unknown\nUse `configure --list` to show available watchfaces",
            file=sys.stderr)
        return 1

    # Remove previously inserted content
    for f in os.listdir(src_path):
        if args.do_dry_run:
            print(f"remove: {os.path.relpath(src_path)}/{f}")
        else:
            os.remove(os.path.join(src_path, f))

    # Reset any previously applied patches
    patched_marker = os.path.join(project_root, ".patched")
    if os.path.exists(patched_marker):
        with open(patched_marker, "r") as f:
            reset_dir = f.read()
            if args.do_dry_run:
                print(f"reset: {os.path.relpath(reset_dir)}")
            else:
                try:
                    subprocess.run(["git", "reset", "--hard", "HEAD"],
                        check=True, capture_output=True, cwd=reset_dir)
                    os.remove(patched_marker)
                except subprocess.CalledProcessError as e:
                    print(f"Reset of a previous patch failed with returncode {e.returncode}!\n{e.output}", file=sys.stderr)
                    return 1


    # Set up new content
    watchface_dirpath = os.path.join(
        project_root,
        namemap[args.watchface].content["path"]["watchface_dirpath"])
    if namemap[args.watchface].content["path"]["uses_folder_hierarchy"]:
        watchface_dirpath = os.path.join(watchface_dirpath, args.watchface)
    for f in os.listdir(watchface_dirpath):
        if f != "settings.h" and f[0] != '.':
            if args.do_dry_run:
                print(f"symlink: {os.path.relpath(watchface_dirpath)}/{f} -> {os.path.relpath(src_path)}/{f}")
            else:
                os.symlink(os.path.join(watchface_dirpath, f), os.path.join(src_path, f))

    settings_template_filepath = os.path.join(
        project_root,
        namemap[args.watchface].content["path"]["settings_template_filepath"])
    copy_dest_path = os.path.join(src_path, "settings.h")
    if args.do_dry_run:
        print(f"symlink: {os.path.relpath(settings_template_filepath)} -> {os.path.relpath(copy_dest_path)}")
    else:
        os.symlink(
            settings_template_filepath,
            copy_dest_path)

    # Optional patching
    try:
        patch_filepath = os.path.join(
            project_root,
            namemap[args.watchface].content["patch"]["patch_filepath"])
        apply_on_dirpath = os.path.join(
            project_root,
            namemap[args.watchface].content["patch"]["apply_on_dirpath"])
        if args.do_dry_run:
            print(f"patch: {os.path.relpath(patch_filepath)} on {os.path.relpath(apply_on_dirpath)}")
        else:
            try:
                subprocess.run(["git", "apply", patch_filepath],
                    check=True, capture_output=True, cwd=apply_on_dirpath)
                with open(patched_marker, 'w') as f:
                    f.write(apply_on_dirpath)
            except subprocess.CalledProcessError as e:
                print(f"Patch failed with returncode {e.returncode}!\n{e.stderr}",
                    file=sys.stderr)
                return 1
    except KeyError:
        pass

    return 0


if __name__ == "__main__":
        exit(start())
